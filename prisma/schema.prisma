// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  plan          String        @default("FREE") // FREE, PREMIUM, LIFETIME
  pdfDownloads  Int         @default(0) @map("pdf_downloads")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  accounts   Account[]
  sessions   Session[]
  curriculums Curriculum[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Curriculum {
  id          String   @id @default(cuid())
  title       String
  template    String   @default("modern")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Dados pessoais
  personalInfo PersonalInfo?
  
  // Seções do currículo
  experiences  Experience[]
  educations   Education[]
  skills       Skill[]
  languages    Language[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("curriculums")
}

model PersonalInfo {
  id           String  @id @default(cuid())
  curriculumId String  @unique @map("curriculum_id")
  fullName     String  @map("full_name")
  email        String
  phone        String?
  address      String?
  city         String?
  state        String?
  zipCode      String? @map("zip_code")
  linkedin     String?
  github       String?
  website      String?
  summary      String?

  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@map("personal_info")
}

model Experience {
  id           String    @id @default(cuid())
  curriculumId String    @map("curriculum_id")
  company      String
  position     String
  location     String?
  startDate    DateTime  @map("start_date")
  endDate      DateTime? @map("end_date")
  current      Boolean   @default(false)
  description  String?
  order        Int       @default(0)

  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Education {
  id           String    @id @default(cuid())
  curriculumId String    @map("curriculum_id")
  institution  String
  degree       String
  field        String?
  location     String?
  startDate    DateTime  @map("start_date")
  endDate      DateTime? @map("end_date")
  current      Boolean   @default(false)
  description  String?
  order        Int       @default(0)

  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model Skill {
  id           String    @id @default(cuid())
  curriculumId String    @map("curriculum_id")
  name         String
  category     String?
  level        String @default("INTERMEDIATE") // BEGINNER, INTERMEDIATE, ADVANCED, EXPERT
  order        Int        @default(0)

  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Language {
  id           String         @id @default(cuid())
  curriculumId String         @map("curriculum_id")
  name         String
  proficiency  String    @default("INTERMEDIATE") // BASIC, INTERMEDIATE, ADVANCED, FLUENT, NATIVE
  order        Int            @default(0)

  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)

  @@map("languages")
}

// Note: Using strings instead of enums for SQLite compatibility
// Plan values: "FREE", "PREMIUM", "LIFETIME"
// SkillLevel values: "BEGINNER", "INTERMEDIATE", "ADVANCED", "EXPERT"  
// Proficiency values: "BASIC", "INTERMEDIATE", "ADVANCED", "FLUENT", "NATIVE"
