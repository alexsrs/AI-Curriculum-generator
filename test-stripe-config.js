#!/usr/bin/env node

/**
 * Script de teste para verificar configura√ß√£o do Stripe
 * Execute: node test-stripe-config.js
 */

const stripe = require('stripe');
const dotenv = require('dotenv');

// Carrega vari√°veis de ambiente
dotenv.config({ path: '.env.local' });

const requiredEnvVars = [
  'STRIPE_PUBLISHABLE_KEY',
  'STRIPE_SECRET_KEY',
  'STRIPE_WEBHOOK_SECRET',
  'STRIPE_PREMIUM_MONTHLY_PRICE_ID',
  'STRIPE_PREMIUM_YEARLY_PRICE_ID'
];

console.log('üîç Verificando configura√ß√£o do Stripe...\n');

// Verifica vari√°veis de ambiente
console.log('üìã Verificando vari√°veis de ambiente:');
let missingVars = [];

requiredEnvVars.forEach(varName => {
  const value = process.env[varName];
  if (!value) {
    console.log(`‚ùå ${varName}: N√£o configurada`);
    missingVars.push(varName);
  } else {
    console.log(`‚úÖ ${varName}: Configurada`);
  }
});

if (missingVars.length > 0) {
  console.log('\n‚ö†Ô∏è  Vari√°veis faltando no .env.local:');
  missingVars.forEach(varName => {
    console.log(`   - ${varName}`);
  });
  console.log('\nüìù Consulte STRIPE-QUICKSTART.md para configura√ß√£o');
  process.exit(1);
}

// Testa conex√£o com Stripe
console.log('\nüåê Testando conex√£o com Stripe...');

const stripeClient = new stripe(process.env.STRIPE_SECRET_KEY, {
  apiVersion: '2023-10-16',
});

async function testStripeConnection() {
  try {
    // Testa conex√£o b√°sica
    const account = await stripeClient.accounts.retrieve();
    console.log(`‚úÖ Conex√£o com Stripe: OK (${account.business_type || 'individual'})`);
    
    // Verifica se est√° em modo de teste
    const isTestMode = process.env.STRIPE_SECRET_KEY.startsWith('sk_test_');
    console.log(`üß™ Modo de teste: ${isTestMode ? 'Sim' : 'N√£o'}`);
    
    // Testa price IDs
    console.log('\nüí∞ Verificando produtos:');
    
    const monthlyPriceId = process.env.STRIPE_PREMIUM_MONTHLY_PRICE_ID;
    const yearlyPriceId = process.env.STRIPE_PREMIUM_YEARLY_PRICE_ID;
    
    try {
      const monthlyPrice = await stripeClient.prices.retrieve(monthlyPriceId);
      console.log(`‚úÖ Plano mensal: ${monthlyPrice.nickname || 'Sem nome'} - ${monthlyPrice.unit_amount/100} ${monthlyPrice.currency.toUpperCase()}`);
    } catch (error) {
      console.log(`‚ùå Plano mensal: Price ID inv√°lido (${monthlyPriceId})`);
    }
    
    try {
      const yearlyPrice = await stripeClient.prices.retrieve(yearlyPriceId);
      console.log(`‚úÖ Plano anual: ${yearlyPrice.nickname || 'Sem nome'} - ${yearlyPrice.unit_amount/100} ${yearlyPrice.currency.toUpperCase()}`);
    } catch (error) {
      console.log(`‚ùå Plano anual: Price ID inv√°lido (${yearlyPriceId})`);
    }
    
    // Lista webhooks
    console.log('\nüîó Verificando webhooks:');
    const webhooks = await stripeClient.webhookEndpoints.list({ limit: 10 });
    
    if (webhooks.data.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum webhook configurado');
    } else {
      webhooks.data.forEach(webhook => {
        console.log(`‚úÖ Webhook: ${webhook.url}`);
        console.log(`   Status: ${webhook.status}`);
        console.log(`   Eventos: ${webhook.enabled_events.join(', ')}`);
      });
    }
    
    console.log('\nüéâ Configura√ß√£o do Stripe validada com sucesso!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Execute: npm run dev');
    console.log('2. Acesse: http://localhost:3000/pricing');
    console.log('3. Teste com cart√£o: 4242 4242 4242 4242');
    
  } catch (error) {
    console.error('‚ùå Erro ao conectar com Stripe:', error.message);
    
    if (error.message.includes('Invalid API Key')) {
      console.log('\nüí° Dica: Verifique se a STRIPE_SECRET_KEY est√° correta');
    }
    
    process.exit(1);
  }
}

testStripeConnection();
